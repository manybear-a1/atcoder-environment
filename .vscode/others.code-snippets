{
	"atcoder-default": {
		"description": "default template for atcoder",
		"prefix": "atcoder-default",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"  ${1}",
			"  return 0;",
			"}"
		],
		"scope": "cpp",
		"isFileTemplate": true
	},

	// "mod-divide": {
	// 	"prefix": "mod-divede",
	// 	"description": "",
	// 	//ref:https://qiita.com/e869120/items/b4a0493aac567c6a7240
	// 	"body": [
	// 		"//逆元を求める",
	// 		"ll modpow(ll a, ll b, ll mod) {",
	// 		"  ll p = 1, q = a;",
	// 		"  for (int i = 0; i < 31; i++) {",
	// 		"    if ((b & (1 << i)) != 0) { p *= q; p %= mod; }",
	// 		"  q *= q; q %= mod;",
	// 		"  }",
	// 		"  return p;",
	// 		"}",
	// 		"",
	// 		"//mod が素数の時の割り算",
	// 		"ll Div(ll a, ll b, ll mod) {",
	// 		"  return (a * modpow(b, mod - 2, mod)) % mod;",
	// 		"}"
	// 	]
	// },
	"auto compare": {
		"description": "auto compare",
		"prefix": "auto compare",
		"body": [
			"auto compare = [](const auto &lhs, const auto &rhs) {",
			"  return lhs.first < rhs.first;",
			"};"
		]
	},
	"lower_bound idx": {
		"description": "lower_bound idx",
		"prefix": "lower_bound idx",
		"body": [
			"lower_bound(all(${1:v}), ${2:x}) - ${1:v}.begin();",
		]
	},
	"manhattan distance to Chebyshev distance": {
		"prefix": "manhattan distance to Chebyshev distance",
		"body": [
			"template<class T> T manhattan_distance(T x1, T y1, T x2, T y2) {",
			"  return abs(x1 - x2) + abs(y1 - y2);",
			"}",
			"template<class T> T Chebyshev_distance(T x1, T y1, T x2, T y2) {",
			"  return max(abs(x1 - x2), abs(y1 - y2));",
			"}",
			"template<class T> pair<T,T> rotate45(T x, T y) {",
			"  return make_pair(x - y, x + y);",
			"}",
			"template<class T> vc<pair<T,T>> rotate45(vc<pair<T,T>> v) {",
			"  vc<pair<T,T>> res;",
			"  for(auto [x, y] : v) res.push_back(make_pair((x - y), (x + y)));",
			"  return res;",
			"}"
		]
	},
	"cycle": {
		"description": "周期性を利用する解法用。周期を求める。",
		"prefix": "cycle",
		//ref:https://github.com/E869120/kyopro_educational_90/blob/main/sol/058.cpp
		"body": [
			"ll size = N;",
			"vector<int> time_stamp(size, -1);",
			"int pos = N, cnt = 0;",
			"while (time_stamp[pos] == -1) {",
			"  time_stamp[pos] = cnt;",
			"  pos = nxt[pos];",
			"  ++cnt;",
			"}",
			"int cycle = cnt - time_stamp[pos];",
			"if (K >= time_stamp[pos]) {",
			"  K = (K - time_stamp[pos]) % cycle + time_stamp[pos];",
			"}",
			"int answer = -1;",
			"for (int i = 0; i < size; ++i) {",
			"  if (time_stamp[i] == K) {",
			"    answer = i;",
			"  }",
			"}"
		]
	},
	"Subgroups": {
		"description": "部分集合全列挙",
		"prefix": "subgroup",
		"body": [
			"for (ll sub = n; sub--; sub >= 0)",
			"{",
			"  $1",
			"}"
		]
	}
}

