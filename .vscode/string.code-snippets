{
  "char appear index": {
    "prefix": "char appear index",
    //ref:https://github.com/drken1215/algorithm/blob/master/String/next.cpp
    "body": [

      "//",
      "// 文字列 DP で頻繁に必要になる前処理",
      "//",
      "// verified:",
      "//   ARC 081 E - Don't Be a Subsequence",
      "//     https://beta.atcoder.jp/contests/arc081/tasks/arc081_c",
      "//",
      "",
      "/*",
      "    res[i][c] := i 文字目以降で最初に文字 c が登場する index (存在しないときは n)",
      " */",
      "// res[i][c] := i 文字目以降で最初に文字 c が登場する index (存在しないときは n)",
      "vector<vector<ll> > calcNext(const string &S) {",
      "    ll n = (ll)S.size();",
      "    vector<vector<ll> > res(n+1, vector<ll>(26, n));",
      "    for (ll i = n-1; i >= 0; --i) {",
      "        for (ll j = 0; j < 26; ++j) res[i][j] = res[i+1][j];",
      "        res[i][S[i]-'a'] = i;",
      "    }",
      "    return res;",
      "}",
    ]
  },
  "string-combination-dp(耳DP)": {
    "prefix": "string-combination-dp(耳DP)",
    "body": [
      "  // 耳DP",
      "  // https://atcoder.jp/contests/typical90/tasks/typical90_h",
      "  ll N;",
      "  cin >> N;",
      "  string S;",
      "  cin >> S;",
      "  string obj = \"atcoder\";",
      "  vv<mint> dp(N + 1, vc<mint>(obj.size() + 1, 0));",
      "  dp[0][0] = 1;",
      "  rep(i, N)",
      "  {",
      "    rep(j, obj.size() + 1)",
      "    {",
      "      dp[i + 1][j] += dp[i][j];",
      "      if (S[i] == obj[j])",
      "      {",
      "        dp[i + 1][j + 1] += dp[i][j];",
      "      }",
      "    }",
      "  }",
      "  cout << dp[N][obj.size()].val() << endl;",
      "  // cout << ans << endl;",
      "  return 0;"
    ]
  }
}