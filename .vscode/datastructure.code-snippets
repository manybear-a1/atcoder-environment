{
  "Union Find": {
    "description": "Union Find(deprecated,AC Libraryのdsuを使ってください。",
    "prefix": "UnionFind",
    //ref:https://algo-logic.info/union-find-tree/
    "body": [
      "//AC Libraryのdsuを使ってください。",
      "/* UnionFind：素集合系管理の構造体(union by rank)",
      "    isSame(x, y): x と y が同じ集合にいるか。 計算量はならし O(α(n))",
      "    unite(x, y): x と y を同じ集合にする。計算量はならし O(α(n))",
      "*/",
      "struct UnionFind {  // The range of node number is u 0 v n-1",
      "  vector<int> size, parents;",
      "  UnionFind() {}",
      "  UnionFind(int n) {  // make n trees.",
      "    size.resize(n, 0);",
      "    parents.resize(n, 0);",
      "    for (int i = 0; i < n; i++) {",
      "      makeTree(i);",
      "    }",
      "  }",
      "  void makeTree(int x) {",
      "    parents[x] = x;  // the parent of x is x",
      "    size[x] = 1;",
      "  }",
      "  bool isSame(int x, int y) { return findRoot(x) == findRoot(y); }",
      "  void unite(int x, int y) {",
      "    x = findRoot(x);",
      "    y = findRoot(y);",
      "    if (size[x] > size[y]) {",
      "      parents[y] = x;",
      "      size[x] += size[y];",
      "    } else {",
      "      parents[x] = y;",
      "      size[y] += size[x];",
      "    }",
      "  }",
      "  int findRoot(int x) {",
      "    if (x != parents[x]) parents[x] = findRoot(parents[x]);",
      "    return parents[x];",
      "  }",
      "  int treeSize(int x) { return size[findRoot(x)]; }",
      "};",
    ]
  }
}