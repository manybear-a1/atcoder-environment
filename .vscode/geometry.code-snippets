{
  "distance-2d": {
    "prefix": "distance-2d",
    "body": [
      "struct Point {",
      "  double x, y;",
      "};",
      "double distance(Point a, Point b) {",
      "  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));",
      "}"
    ],
    "description": "Calculate distance between two points in 2d space"
  },
  "distance-3d": {
    "prefix": "distance-3d",
    "body": [
      "struct Point {",
      "  double x, y, z;",
      "};",
      "double distance(Point a, Point b) {",
      "  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2) + pow(a.z - b.z, 2));",
      "}"
    ],
    "description": "Calculate distance between two points in 3d space"
  },
  "PI": {
    "description": "PI",
    "prefix": "PI",
    "body": [
      "const double PI = 3.14159265358979323846;",
      "double deg2rad(double deg)",
      "{",
      "  return deg * PI / 180;",
      "}",
      "double rad2deg(double rad)",
      "{",
      "  return rad * 180 / PI;",
      "}"
    ]
  },
  "Line": {
    "prefix": "Line",
    "body": [
      "struct Line",
      "{",
      "  ll a, b, c; // ax+by+c=0",
      "  Line(ll a_ = 0, ll b_ = 0, ll c_ = 0) : a(a_), b(b_), c(c_)",
      "  {",
      "    ll g = gcd(a, gcd(b, c));",
      "    if (g != 0)",
      "    {",
      "      a /= g;",
      "      b /= g;",
      "      c /= g;",
      "    }",
      "    if (a < 0 || (a == 0 && b < 0) || (a == 0 && b == 0 && c < 0))",
      "    {",
      "      a *= -1;",
      "      b *= -1;",
      "      c *= -1;",
      "    }",
      "    // this->a = a;",
      "    // this->b = b;",
      "    // this->c = c;",
      "  }",
      "  // p.first=x,p.second=y",
      "  Line(const P &p1, const P &p2)",
      "  {",
      "    a = p2.second - p1.second;",
      "    b = p1.first - p2.first;",
      "    c = -(a * p1.first + b * p1.second);",
      "    *this = Line(a, b, c);",
      "  }",
      "  bool is_point_on_line(const P &p) const",
      "  {",
      "    return a * p.first + b * p.second + c == 0;",
      "  }",
      "  bool operator==(const Line &l) const",
      "  {",
      "    return a == l.a && b == l.b && c == l.c;",
      "  }",
      "  bool operator<(const Line &l) const",
      "  {",
      "    if (a != l.a)",
      "      return a < l.a;",
      "    if (b != l.b)",
      "      return b < l.b;",
      "    return c < l.c;",
      "  }",
      "};",
    ]
  }
}