{
  "bisect-array": {
    "prefix": "bisect-array",
    "description": "bisect-array",
    //ref:https://qiita.com/drken/items/97e37dd6143e33a64c8c
    "body": [
      "vector<ll> A;",
      "bool isOK(ll index, ll key) {",
      "  return (A[index] >= key);",
      "}",
      "",
      "// 汎用的な二分探索のテンプレ",
      "ll binary_search(ll key) {",
      "  ll ng = -1; //「index = 0」が条件を満たすこともあるので、初期値は -1",
      "  ll ok = (ll)A.size(); // 「index = A.size()-1」が条件を満たさないこともあるので、初期値は A.size()",
      "",
      "  /* ok と ng のどちらが大きいかわからないことを考慮 */",
      "  while (abs(ok - ng) > 1/*許容誤差*/) {",
      "    ll mid = (ok + ng) / 2;",
      "    ",
      "    if (isOK(mid, key)) ok = mid;",
      "    else ng = mid;",
      "  }",
      "  return ok;",
      "}"
    ],
  },
  "bisect-function": {
    "prefix": "bisect-function",
    "description": "bisect-function",
    //ref:https://qiita.com/drken/items/97e37dd6143e33a64c8c
    "body": [
      "bool isOK(ll x) {",
      "  return x >= 0;",
      "}",
      "",
      "// 汎用的な二分探索のテンプレ",
      "ll binary_search() {",
      "  ll ng = -1;",
      "  ll ok = 1000000000;",
      "",
      "  /* ok と ng のどちらが大きいかわからないことを考慮 */",
      "  while (abs(ok - ng) > 1/*許容誤差*/) {",
      "    ll mid = (ok + ng) / 2;",
      "    ",
      "    if (isOK(mid)) ok = mid;",
      "    else ng = mid;",
      "  }",
      "  return ok;",
      "}"
    ],
  }
}