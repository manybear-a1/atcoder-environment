{
  "segmentTree": {
    "prefix": "segmentTree",
    "body": [
      "//区間加算・区間最小値取得",
      "//値の乗せ方:https://betrue12.hateblo.jp/entry/2020/09/22/194541",
      "//チートシート:https://betrue12.hateblo.jp/entry/2020/09/23/005940",
      "using S = ll;",
      "",
      "",
      "S op(S a, S b){ return std::max(a, b); }",
      "S e(){ return -INF; }",
      "using Seg = atcoder::segtree<S, op, e>;",
      "S target = 0;",
      "//target以上の最小の値を持つ区間の左端を返す",
      "//ref:https://qiita.com/recuraki/items/ae8e965b84f0e5443dc5",
      "bool min_left(S x){",
      "  return x < target;",
      "}",
    ]
  },

  "lazySegmentTree": {
    "prefix": "lazySegmentTree",
    "body": [
      "//区間加算・区間最小値取得",
      "//値の乗せ方:https://betrue12.hateblo.jp/entry/2020/09/22/194541",
      "//チートシート:https://betrue12.hateblo.jp/entry/2020/09/23/005940",
      "using S = ll;",
      "using F = ll;",
      "",
      "",
      "S op(S a, S b){ return std::max(a, b); }",
      "S e(){ return -INF; }",
      "S mapping(F f, S x){ return f+x; }",
      "F composition(F f, F g){ return f+g; }",
      "F id(){ return 0; }",
      "using lazy_seg = atcoder::lazy_segtree<S, op, e, F, mapping, composition, id>;",
      "S target = 0;",
      "//target以上の最小の値を持つ区間の左端を返す",
      "//ref:https://qiita.com/recuraki/items/ae8e965b84f0e5443dc5",
      "bool min_left(S x){",
      "  return x < target;",
      "}",
    ]
  }
}