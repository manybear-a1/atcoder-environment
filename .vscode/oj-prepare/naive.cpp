//https://qiita.com/Raclamusi/items/660f0f42c57e4371ed78
#ifdef INCLUDED_MAIN
<%!
    import json
    import os
    import platform
    import shutil
    from logging import getLogger

    import onlinejudge_template.generator.cplusplus as cplusplus
    import onlinejudge_template.generator.topcoder as topcoder
    import onlinejudge_template.generator.about as about
    import onlinejudge_template.generator.hook as hook
%>\
<%
    # 中身はただのpython
    logger = getLogger(__name__)
    data["config"]["rep_macro"] = "rep"
    data["config"]["long_long_int"] = "ll"
    data["config"]["indent"] = "  "
    if not shutil.which("clang-format"):
        # logger.warning("clang-format is not installed. If you want to generate well-formatted code, please install it. If you use Ubuntu, you can run $ sudo apt install clang-format")
        pass
    else:
        format_config = {
            "BasedOnStyle": "Google",
            "IndentWidth": 4,
            "ColumnLimit": 9999,
            "ForEachMacros": ["rep"],
        }
        hook.register_filter_command(["clang-format", "--style", json.dumps(format_config)], data=data)
%>\
${cplusplus.declare_constants(data)}
% if topcoder.is_topcoder(data):
<% solve_function = topcoder.class_name(data) + "()." + topcoder.method_name(data) %>\
class ${topcoder.class_name(data)} {
public:
    ${cplusplus.return_type(data)} ${topcoder.method_name(data)}(${cplusplus.formal_arguments(data)}) {
      // TODO: edit here
    }
};
% else:
<% solve_function = "solve" %>\
${cplusplus.return_type(data)} solve(${cplusplus.formal_arguments(data)}) {
  // 問題の答え以外の情報を保存したいとき用
  // ofstream outputFile;
  // {
  //   int count = 0;
  //   string name = "./log/detail0.txt";
  //   while (filesystem::is_regular_file(name))
  //   {
  //     count++;
  //     name = "./log/detail" + to_string(count) + ".txt";
  //     // フェイルセーフ（一敗）
  //     if (count >= 303)
  //     {
  //       break;
  //     }
  //   }
  //   outputFile.open(name);
  // }
  // TODO: edit here

  // outputFile.close();
}
% endif
// generated by ${about.title} ${about.version} (${about.url})
int main()
{
  cin.tie(nullptr);
  ios_base::sync_with_stdio(false);
  cout << fixed << setprecision(15);
  // ref:https://rsk0315.hatenablog.com/entry/2020/05/09/170315
${cplusplus.read_input(data)}
  auto ${cplusplus.return_value(data)} = ${solve_function}(${cplusplus.actual_arguments(data)});
${cplusplus.write_output(data)}
  return 0;
}


#else


// #ifndef ONLINE_JUDGE
// #define _GLIBCXX_DEBUG 1 //[]で配列外参照をするとエラーにしてくれる。上下のやつがないとTLEになるので注意 ABC311Eのサンプル4みたいなデバック中のTLEは防げないので注意
// #endif

#ifdef ONLINE_JUDGE
#define NDEBUG
#include <atcoder/all>
#endif
#include <bits/stdc++.h>
// # include <boost/multiprecision/cpp_dec_float.hpp>
// # include <boost/multiprecision/cpp_int.hpp>
// # include <boost/rational.hpp>
// namespace mp = boost::multiprecision;
// // 任意長整数型
// using Bint = mp::cpp_int;
// // 仮数部が32桁(10進数)の浮動小数点数型
// using Real32 = mp::number<mp::cpp_dec_float<32>>;
// // 仮数部が1024桁(10進数)の浮動小数点数型
// using Real1024 = mp::number<mp::cpp_dec_float<1024>>;
// // ついでに有理数型
// using Rat = boost::rational<Bint>;
using namespace atcoder;

using namespace std;
using ll = int64_t;
using ld = long double;
#define double ld
ll INF = 2e18;
using P = pair<ll, ll>;
#define pb push_back
#define rep(i, n) for (ll i = 0; i < (ll)(n); i++)
#define reprev(i, n) for (ll i = (ll)(n) - 1; i >= 0; i--)
#define reps(i, n) for (ll i = 1; i <= (ll)(n); i++)
#define for_(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define all(v) v.begin(), v.end()
template <typename T>
inline bool chmin(T &a, const T &b)
{
  bool c = a > b;
  if (c)
    a = b;
  return c;
}
template <typename T>
inline bool chmax(T &a, const T &b)
{
  bool c = a < b;
  if (c)
    a = b;
  return c;
}
template <typename T>
inline T ceil(T a, T b) { return (a + (b - 1)) / b; }
using mint = modint998244353;
// using mint = modint1000000007;
// using mint = static_modint<10>;//使うときはコメントアウトを外す
template <typename T>
using vc = vector<T>;
template <class T>
istream &operator>>(istream &i, vc<T> &v)
{
  rep(j, (ll)size(v)) i >> v[j];
  return i;
}
template <class T>
ostream &operator<<(ostream &o, const vc<T> &v)
{
  rep(j, (ll)size(v))
  {
    if (j)
      o << " ";
    o << v[j];
  }
  o << endl;
  return o;
}

#define INCLUDED_MAIN
#include __FILE__

#endif